plugins {
	id 'org.springframework.boot' version '2.3.0.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'java'
	id 'jacoco'
	id 'idea'
}

group = 'com.gabchak.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '14'

repositories {
	mavenCentral()
}

ext {
	lombokVersion = "1.18.12"
	orikaVersion = "1.5.4"
	jjwtVersion = "0.9.1"
	commonsLang3Version = "3.10"
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	compileOnly "org.projectlombok:lombok:${lombokVersion}"
	annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
	testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
	testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

	compile "ma.glasnost.orika:orika-core:${orikaVersion}"
	compile "io.jsonwebtoken:jjwt:${jjwtVersion}"
	compile "org.apache.commons:commons-lang3:${commonsLang3Version}"

	implementation 'org.flywaydb:flyway-core'
	runtimeOnly 'mysql:mysql-connector-java'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation 'org.springframework.security:spring-security-test'
}

test {
	useJUnitPlatform()
}

jacocoTestReport {
	reports {
		csv.enabled false
		xml.enabled true
		html.enabled true
		html.destination file("${buildDir}/site/jacoco")
	}
	afterEvaluate {
		getClassDirectories().setFrom(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					'**/com/gabchak/example/security/jwt/**',
					'**/com/gabchak/example/security/config',
					'**/com/gabchak/example/security/constant/**',
					'**/com/gabchak/example/dto/mapper/**',
					'**/com/gabchak/example/dto/**',
					'**/com/gabchak/example/SpringSecurityJwtExampleApplication.class',
					'**/com/gabchak/example/config/**',
					'**/com/gabchak/example/exception/**',
					'**/com/gabchak/example/models/**'
			])
		})
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			element = 'BUNDLE'
			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				 minimum = 0.8
			}
			limit {
				counter = 'INSTRUCTION'
				value = 'COVEREDRATIO'
				minimum = 0.8
			}
		}
	}
	afterEvaluate {
		getClassDirectories().setFrom(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					'**/com/gabchak/example/security/jwt/**',
					'**/com/gabchak/example/security/config',
					'**/com/gabchak/example/security/constant/**',
					'**/com/gabchak/example/dto/mapper/**',
					'**/com/gabchak/example/dto/**',
					'**/com/gabchak/example/SpringSecurityJwtExampleApplication.class',
					'**/com/gabchak/example/config/**',
					'**/com/gabchak/example/exception/**',
					'**/com/gabchak/example/models/**'
			])
		})
	}
}

test.finalizedBy jacocoTestReport
check.dependsOn jacocoTestCoverageVerification
